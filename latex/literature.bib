@misc{autopas_issue673,
  author       = {HobbyProgrammer},
  title        = {Skip (or even timeout) extremely long running iterations of configurations during tuning},
  year         = {2022},
  publisher    = {GitHub},
  journal      = {GitHub repository},
  howpublished = {\url{https://github.com/AutoPas/AutoPas/issues/673}},
  note         = {Accessed: 2024-11-06}
}

@article{CARTEREDWARDS20143202,
  title    = {Kokkos: Enabling manycore performance portability through polymorphic memory access patterns},
  journal  = {Journal of Parallel and Distributed Computing},
  volume   = {74},
  number   = {12},
  pages    = {3202-3216},
  year     = {2014},
  note     = {Domain-Specific Languages and High-Level Frameworks for High-Performance Computing},
  issn     = {0743-7315},
  doi      = {https://doi.org/10.1016/j.jpdc.2014.07.003},
  url      = {https://www.sciencedirect.com/science/article/pii/S0743731514001257},
  author   = {H. {Carter Edwards} and Christian R. Trott and Daniel Sunderland},
  keywords = {Parallel computing, Thread parallelism, Manycore, GPU, Performance portability, Multidimensional array, Mini-application},
  abstract = {The manycore revolution can be characterized by increasing thread counts, decreasing memory per thread, and diversity of continually evolving manycore architectures. High performance computing (HPC) applications and libraries must exploit increasingly finer levels of parallelism within their codes to sustain scalability on these devices. A major obstacle to performance portability is the diverse and conflicting set of constraints on memory access patterns across devices. Contemporary portable programming models address manycore parallelism (e.g., OpenMP, OpenACC, OpenCL) but fail to address memory access patterns. The Kokkos C++ library enables applications and domain libraries to achieve performance portability on diverse manycore architectures by unifying abstractions for both fine-grain data parallelism and memory access patterns. In this paper we describe Kokkos’ abstractions, summarize its application programmer interface (API), present performance results for unit-test kernels and mini-applications, and outline an incremental strategy for migrating legacy C++ codes to Kokkos. The Kokkos library is under active research and development to incorporate capabilities from new generations of manycore architectures, and to address a growing list of applications and domain libraries.}
}


@mastersthesis{endreport.pdf,
  type     = {Project Report},
  author   = {Humig, Tobias},
  title    = {Project Report: Exploring Performance Modeling in AutoPas},
  year     = {2023},
  school   = {Technical University of Munich},
  month    = {Oct},
  adress   = {},
  pages    = {},
  language = {en},
  abstract = {The particle simulation library AutoPas implements many algorithms with vastly different performance characteristics to solve the pairwise short-range particle interactions in molecular dynamics simulations. During the simulation, it uses black-box optimization techniques to automatically select the fastest algorithm for the current state. While they are able to find good algorithms eventually, they often try highly unsuitable ones at the start due to lack of initial per- formance information. As some algorithms perform orders of magnitude worse than the optimum for a given simulation state, this has a significant negative impact on the time to solution.
              In this project, we gather knowledge about the performance characteristics of the algorithms through theoretical modeling, profiling, and benchmarking. We make the results available through a new white-box optimization strategy that is able to apply any domain-specific knowledge during optimization. It removes those algorithms from the candidate list that likely perform worst in the current simulation state. In our tests, removing the five percent slowest algorithms reduced the tuning time by up to 80 percent while still finding the best algorithm. Furthermore, we give insights and recommendations what can be done to potentially improve the performance further.
              },
  keywords = {AutoPas},
  note     = {},
  url      = {}
}

@mastersthesis{Gärtner_KokkosInAutoPas.pdf,
  author   = {Gärtner, Ludwig},
  title    = {Integrating Kokkos into AutoPas for hardware agnostic particle simulations},
  year     = {2022},
  school   = {Technical University of Munich},
  month    = {Feb},
  adress   = {},
  pages    = {},
  language = {en},
  abstract = {AutoPas is an auto tuner for N-body simulations. Kokkos is a library that offers hardware independency through abstractions. The goal of this thesis was, an integration of Kokkos into AutoPas to improve performance portability.
              This integration for now is limited to the KokkosLinkedCells container, which uses a central particle storage and an index based metadatastructure to link particles to cells in the simulation domain.
              However, the implementation for this thesis was not finished to a point where it could be run on systems other than conventional multi core systems. Instead, the performance of the new KokkosLinkedCells container is compared to that of the regular LinkedCells container to determine the overhead that is introduced by this additional layer of abstraction. Overall, both containers perform very similarly in scenarios where work is evenly distributed among all threads, but the absence of algorithmic load balancing or dynamic scheduling harms the performance of the KokkosLinkedCells container in scenarios where particles are focused in one part of the simulation domain.},
  keywords = {AutoPas;Kokkos},
  note     = {},
  url      = {}
}

@inproceedings{Gratl2019AutoPas,
  author    = {Gratl, Fabio Alexander and Seckler, Steffen and Tchipev, Nikola and Bungartz, Hans-Joachim and Neumann, Philipp},
  booktitle = {2019 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)},
  title     = {AutoPas: Auto-Tuning for Particle Simulations},
  year      = {2019},
  volume    = {},
  number    = {},
  pages     = {748-757},
  keywords  = {Force;Heuristic algorithms;Computational modeling;Dynamics;Optimization;Software algorithms;Adaptation models;HPC;Molecular Dynamics;Auto-Tuning;Automatic Algorithm Selection;Dynamic Tuning},
  doi       = {10.1109/IPDPSW.2019.00125}
}

@article{Gratl2022AutoPas,
  title    = {N ways to simulate short-range particle systems: Automated algorithm selection with the node-level library AutoPas},
  journal  = {Computer Physics Communications},
  volume   = {273},
  pages    = {108262},
  year     = {2022},
  issn     = {0010-4655},
  doi      = {https://doi.org/10.1016/j.cpc.2021.108262},
  url      = {https://www.sciencedirect.com/science/article/pii/S001046552100374X},
  author   = {Fabio Alexander Gratl and Steffen Seckler and Hans-Joachim Bungartz and Philipp Neumann},
  keywords = {HPC, N-body simulation, Molecular dynamics, Auto-tuning, Automatic algorithm selection, Dynamic tuning},
  abstract = {AutoPas is an open-source C++ library delivering optimal node-level performance by providing the ideal algorithmic configuration for an arbitrary scenario in a given short-range particle simulation. It acts as a black-box container, internally implementing an extensive set of algorithms, parallelization strategies, and optimizations that are combined dynamically according to the state of the simulation via auto-tuning. This paper gives an overview of the high-level user perspective, as well as the internal view, covering the implemented techniques and features. The library is showcased by incorporating it into the codes LAMMPS and ls1 mardyn, and by investigating various applications. We further outline node-level shared-memory performance and scalability of our auto-tuning software which is comparable to LAMMPS.
              Program summary
              Program Title: AutoPas CPC Library link to program files: https://doi.org/10.17632/9kdb2p76hv.1 Developer's repository link: https://github.com/AutoPas/AutoPas Code Ocean capsule: https://codeocean.com/capsule/0391732 Licensing provisions: BSD 2-clause Programming language: C++17, CMake 3.14 Nature of problem: The evaluation of the short-range pairwise interactions in an N-Body simulation can be achieved using many different algorithms and parallelization techniques. Depending on the nature of the scenario, its current state, and the forces of interest, the optimal algorithm configuration can differ greatly. Choosing this optimum is a non-trivial task even for experts. Furthermore, this optimum can change over the course of a simulation. Typically, a particle simulation software only implements one algorithm for force computation and is thus specialized for a certain type of simulation. It is up to the user to choose the program suitable for his needs. Solution method: The AutoPas library implements a range of state of the art algorithms to find the relevant neighbors for the N-Body pairwise force calculation. It provides multiple shared-memory parallelization strategies using OpenMP and further algorithm optimization parameters that can all be set at run-time. A big burden for users persists in requiring the expert knowledge to pick the optimal solution procedure for a simulation. AutoPas removes this burden by tuning all aforementioned options automatically and dynamically. This way, simulation programs that make use of AutoPas give every domain scientist the possibility to make use of the most suitable algorithm configuration for arbitrary scenarios.}
}


@article{lammps_kokkos,
  title         = {Speeding up LAMMPS with Kokkos},
  journal       = {LAMMPS Documentation},
  year          = {2024},
  url           = {https://docs.lammps.org/Speed_kokkos.html},
  urlaccessdate = {2024-11-10},
  author        = {LAMMPS},
  keywords      = {LAMMPS, Kokkos, Performance}
}


@mastersthesis{Manuel_Lerchner_Thesis.pdf,
  type     = {Bachelor's Thesis},
  author   = {Lerchner, Manuel},
  title    = {Exploring Fuzzy Tuning Technique for Molecular Dynamics Simulations in AutoPas},
  year     = {2024},
  school   = {Technical University of Munich},
  month    = {Aug},
  adress   = {},
  pages    = {},
  language = {en},
  abstract = {AutoPas is a high-performance, auto-tuned particle simulation library for many-body systems, capable of dynamically switching between algorithms and data structures to guarantee optimal performance throughout the simulation.
              This thesis introduces a novel fuzzy logic-based tuning strategy for AutoPas, allowing users to guide the tuning process by specifying custom Fuzzy Systems, which can be used to efficiently prune the search space of possible parameter configurations. Efficient tuning strategies are crucial, as they allow for discarding poor parameter configurations without evaluating them, thus reducing tuning time and improving overall library performance.
              We demonstrate that a data-driven approach can automatically generate Fuzzy Systems that significantly outperform existing tuning strategies on specific benchmarks, resulting in speedups of up to 1.96x compared to the FullSearch Strategy on scenarios included in the training data and up to 1.35x on scenarios not directly included.
              The Fuzzy Tuning Strategy can drastically reduce the number of evaluated configurations during tuning phases while achieving comparable tuning results, making it a promising alternative to the existing tuning strategies.
              
              },
  keywords = {AutoPas; Auto-tuning; Fuzzy Logic;},
  note     = {},
  url      = {}
}

@inproceedings{Newcome2023Poster,
  editor       = {},
  author       = {Newcome, Samuel James and  Gratl, Fabio Alexander and  Neumann, Philipp and  Bungartz, Hans-Joachim},
  title        = {Towards the Smarter Tuning of Molecular Dynamics Simulations},
  booktitle    = {SIAM Conference on Computational Science and Engineering (CSE23)},
  year         = {2023},
  month        = {Feb},
  volume       = {},
  publisher    = {SIAM},
  organization = {},
  series       = {},
  number       = {},
  pages        = {},
  isbn         = {},
  doi          = {},
  language     = {en},
  abstract     = {The large computational cost of pairwise force calculations within Molecular Dynamics requires the use of specialist algorithms, such as Linked Cells or Verlet Lists, as well as efficient ways of parallelising such algorithms. There is, however, no ``silver bullet'' best algorithm for all simulations, and the best algorithm can change over the course of a simulation.
                  AutoPas is a node-level particle simulation library that aims to dynamically select the most optimal algorithm, vectorisation strategy, and shared memory parallelism for a given metric, such as time for force calculation [F. Gratl et al, N ways to simulate short-range particle systems: Automated algorithm selection with the node-level library AutoPas, 2022]. In multi-node HPC systems, each node has their own AutoPas container, making it's own tuning decisions. Practically, this autotuning requires trialling algorithms during the course of the simulation, however trialling slow algorithms can provide significant overhead, and so smart tuning strategies must be developed that can select optimal, or close to optimal, performance, with minimal overhead.
                  In this poster, we will discuss how statistical techniques such as Bayesian Optimisation, Gaussian Process Models, and Reinforcement Learning can be adapted into smart tuning strategies within AutoPas. To support our claims, we present results using our smart tuning strategies applied to the field of Molecular Dynamics.},
  keywords     = {},
  note         = {},
  url          = {}
}


@phdthesis{Tchipev2020,
  author   = {Tchipev, Nikola Plamenov},
  title    = {Algorithmic and Implementational Optimizations of Molecular Dynamics Simulations for Process Engineering},
  year     = {2020},
  school   = {Technische Universität München},
  pages    = {189},
  language = {en},
  abstract = {The focus of this work lies on implementational improvements and, in particular, node-level performance optimization of the simulation software ls1-mardyn. Through data structure improvements, SIMD vectorization and, especially, OpenMP parallelization, the world’s first simulation of 2*10<sup>13</sup> molecules at over 1 PFLOP/sec was enabled. To allow for long-range interactions, the Fast Multipole Method was introduced to ls1-mardyn. The algorithm was optimized for sequential, shared-memory, and distributed-memory execution on up to 32,768 MPI processes.},
  keywords = {molecular dynamics, node-level performance, OpenMP, Fast Multipole Method},
  note     = {},
  url      = {https://mediatum.ub.tum.de/1524715}
}

@misc{fursin2014collectivetuninginitiative,
      title={Collective Tuning Initiative}, 
      author={Grigori Fursin},
      year={2014},
      eprint={1407.3487},
      archivePrefix={arXiv},
      primaryClass={cs.DC},
      url={https://arxiv.org/abs/1407.3487}, 
}

@article{SECKLER2021101296,
title = {AutoPas in ls1 mardyn: Massively parallel particle simulations with node-level auto-tuning},
journal = {Journal of Computational Science},
volume = {50},
pages = {101296},
year = {2021},
issn = {1877-7503},
doi = {https://doi.org/10.1016/j.jocs.2020.101296},
url = {https://www.sciencedirect.com/science/article/pii/S1877750320305901},
author = {Steffen Seckler and Fabio Gratl and Matthias Heinen and Jadran Vrabec and Hans-Joachim Bungartz and Philipp Neumann},
keywords = {AutoPas, ls1 mardyn, Molecular dynamics, Particle simulations, MPI, Auto-tuning},
abstract = {Due to computational cost, simulation software is confronted with the need to always use optimal building blocks — data structures, solver algorithms, parallelization schemes, and so forth — in terms of efficiency, while it typically needs to support a variety of hardware architectures. AutoPas implements the computationally most expensive molecular dynamics (MD) steps (e.g., force calculation) and chooses on-the-fly, i.e., at run time, the optimal combination of the previously mentioned building blocks. We detail decisions made in AutoPas to enable the interplay with MPI-parallel simulations and, to our knowledge, showcase the first MPI-parallel MD simulations that use dynamic tuning. We discuss the benefits of this approach for three simulation scenarios from process engineering, in which we obtain performance improvements of up to 50%, compared to the baseline performance of the highly optimized ls1 mardyn software.}
}